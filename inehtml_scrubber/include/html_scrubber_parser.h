/*-*-c++-*-*************************************************************************************************************
* Copyright 2016 - 2023 Inesonic, LLC.
*
* GNU Public License, Version 3:
*   This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
*   License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
*   version.
*   
*   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
*   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
*   details.
*   
*   You should have received a copy of the GNU General Public License along with this program.  If not, see
*   <https://www.gnu.org/licenses/>.
********************************************************************************************************************//**
* \file
*
* This header provides a base class for a ypd generated language parser.
***********************************************************************************************************************/

/* .. sphinx-project inehtml_parser */

#ifndef INEHTML_SCRUBBER_PARSER
#define INEHTML_SCRUBBER_PARSER

#include <cassert>

namespace HtmlScrubber {
    /**
     * Parser base class -- Generated by the ypg script.
     */
    class Parser {
        public:
            /**
             * States.
             */
            enum class States {
                IN_TEXT_SPACE,
                IN_TEXT_MULTIPLE_SPACE,
                IN_TEXT,
                IN_TAG_START,
                IN_TAG_SEARCH,
                IN_TAG_QUOTE,
                IN_TAG_SPACE,
                IN_TAG_SLASH,
                IN_TAG_SPACE_S,
                IN_TAG_SPACE_SR,
                IN_TAG_SPACE_SRC,
                IN_TAG_SPACE_SRC_EQUALS,
                IN_TAG_SPACE_SRC_EQUALS_QUOTE,
                IN_TAG_SPACE_SRC_EQUALS_QUOTE_QM,
                IN_TAG_SPACE_H,
                IN_TAG_SPACE_HR,
                IN_TAG_SPACE_HRE,
                IN_TAG_SPACE_HREF,
                IN_TAG_SPACE_HREF_EQUALS,
                IN_TAG_SPACE_HREF_EQUALS_QUOTE,
                IN_TAG_SPACE_C,
                IN_TAG_SPACE_CI,
                IN_TAG_SPACE_CIT,
                IN_TAG_SPACE_CITE,
                IN_TAG_SPACE_CITE_EQUALS,
                IN_TAG_SPACE_CITE_EQUALS_QUOTE,
                IN_TAG_S,
                IN_TAG_SC,
                IN_TAG_SCR,
                IN_TAG_SCRI,
                IN_TAG_SCRIP,
                IN_TAG_SCRIPT,
                IN_TAG_SCRIPT_SPACE,
                IN_TAG_SCRIPT_SPACE_S,
                IN_TAG_SCRIPT_SPACE_SR,
                IN_TAG_SCRIPT_SPACE_SRC,
                IN_TAG_SCRIPT_SPACE_SRC_EQUALS,
                IN_TAG_SCRIPT_SPACE_SRC_EQUALS_QUOTE,
                IN_TAG_ST,
                IN_TAG_STY,
                IN_TAG_STYL,
                IN_TAG_STYLE,
                IN_TAG_STYLE_SLASH,
                IN_TAG_STYLE_SPACE,
                IN_TAG_STYLE_SEARCH,
                IN_TAG_STYLE_QUOTE,
                IN_STYLE_START,
                IN_STYLE,
                IN_STYLE_TAG_START,
                IN_STYLE_TAG_SLASH,
                IN_STYLE_TAG_SLASH_S,
                IN_STYLE_TAG_SLASH_ST,
                IN_STYLE_TAG_SLASH_STY,
                IN_STYLE_TAG_SLASH_STYL,
                IN_STYLE_TAG_SLASH_STYLE,
                NUMBER_STATES
            };

        private:
            /**
             * The current state.
             */
            States currentState;

        public:
            /**
             * Constructor.
             */
            Parser(): currentState(States::IN_TEXT_SPACE) {}

            virtual ~Parser() {}

        protected:
            /**
             * Method you can use to determine the current state.
             *
             * \return Returns the current state.
             */
            inline States state() const {
                return currentState;
            }

            /**
             * Method you can use to parse the next value.
             *
             * \param[in,out] c The value to be parsed.  Called transition function can modify the value.
             */
            void parse(char& c) {
                switch (currentState) {
                    case States::IN_TEXT_SPACE: {
                        if (c == '<') {
                            startTag(currentState, States::IN_TAG_START, c);
                            currentState = States::IN_TAG_START;
                        } else if (std::isspace(c)) {
                            multipleWhiteSpace(currentState, States::IN_TEXT_MULTIPLE_SPACE, c);
                            currentState = States::IN_TEXT_MULTIPLE_SPACE;
                        } else if (c != '<' && !std::isspace(c)) {
                            resumeText(currentState, States::IN_TEXT, c);
                            currentState = States::IN_TEXT;
                        }

                        break;
                    }

                    case States::IN_TEXT_MULTIPLE_SPACE: {
                        if (c == '<') {
                            startTag(currentState, States::IN_TAG_START, c);
                            currentState = States::IN_TAG_START;
                        } else if (c != '<' && !std::isspace(c)) {
                            resumeText(currentState, States::IN_TEXT, c);
                            currentState = States::IN_TEXT;
                        }

                        break;
                    }

                    case States::IN_TEXT: {
                        if (c == '<') {
                            startTag(currentState, States::IN_TAG_START, c);
                            currentState = States::IN_TAG_START;
                        } else if (std::isspace(c)) {
                            whitespace(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        }

                        break;
                    }

                    case States::IN_TAG_START: {
                        if (c == '/') {
                            currentState = States::IN_TAG_SLASH;
                        } else if (c == 's') {
                            currentState = States::IN_TAG_S;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SEARCH: {
                        if (c == '>') {
                            endTag(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SPACE;
                        } else if (c == '"') {
                            currentState = States::IN_TAG_QUOTE;
                        }

                        break;
                    }

                    case States::IN_TAG_QUOTE: {
                        if (c == '"') {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE: {
                        if (c == '>') {
                            endTag(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (c == 's' || c == 'S') {
                            currentState = States::IN_TAG_SPACE_S;
                        } else if (c == 'h' || c == 'H') {
                            currentState = States::IN_TAG_SPACE_H;
                        } else if (c == 'c' || c == 'C') {
                            currentState = States::IN_TAG_SPACE_C;
                        } else if (!std::isspace(c)) {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SLASH: {
                        if (c == '>') {
                            currentState = States::IN_TEXT_SPACE;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE_S: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (c == 'r' || c == 'R') {
                            currentState = States::IN_TAG_SPACE_SR;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE_SR: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (c == 'c' || c == 'C') {
                            currentState = States::IN_TAG_SPACE_SRC;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE_SRC: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SPACE_SRC;
                        } else if (c == '=') {
                            currentState = States::IN_TAG_SPACE_SRC_EQUALS;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE_SRC_EQUALS: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SPACE_SRC_EQUALS;
                        } else if (c == '"' || c == '\'') {
                            startSrcAttribute(currentState, States::IN_TAG_SPACE_SRC_EQUALS_QUOTE, c);
                            currentState = States::IN_TAG_SPACE_SRC_EQUALS_QUOTE;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE_SRC_EQUALS_QUOTE: {
                        if (c == '"' || c == '\'') {
                            endSrcAttribute(currentState, States::IN_TAG_SEARCH, c);
                            currentState = States::IN_TAG_SEARCH;
                        } else if (c == '?') {
                            endSrcAttribute(currentState, States::IN_TAG_SPACE_SRC_EQUALS_QUOTE_QM, c);
                            currentState = States::IN_TAG_SPACE_SRC_EQUALS_QUOTE_QM;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE_SRC_EQUALS_QUOTE_QM: {
                        if (c == '"' || c == '\'') {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE_H: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (c == 'r' || c == 'R') {
                            currentState = States::IN_TAG_SPACE_HR;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE_HR: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (c == 'e' || c == 'E') {
                            currentState = States::IN_TAG_SPACE_HRE;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE_HRE: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (c == 'f' || c == 'F') {
                            currentState = States::IN_TAG_SPACE_HREF;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE_HREF: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SPACE_HREF;
                        } else if (c == '=') {
                            currentState = States::IN_TAG_SPACE_HREF_EQUALS;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE_HREF_EQUALS: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SPACE_HREF_EQUALS;
                        } else if (c == '"' || c == '\'') {
                            startHrefAttribute(currentState, States::IN_TAG_SPACE_HREF_EQUALS_QUOTE, c);
                            currentState = States::IN_TAG_SPACE_HREF_EQUALS_QUOTE;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE_HREF_EQUALS_QUOTE: {
                        if (c == '"' || c == '\'') {
                            endHrefAttribute(currentState, States::IN_TAG_SEARCH, c);
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE_C: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (c == 'i' || c == 'I') {
                            currentState = States::IN_TAG_SPACE_CI;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE_CI: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (c == 't' || c == 'T') {
                            currentState = States::IN_TAG_SPACE_CIT;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE_CIT: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (c == 'e' || c == 'E') {
                            currentState = States::IN_TAG_SPACE_CITE;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE_CITE: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SPACE_CITE;
                        } else if (c == '=') {
                            currentState = States::IN_TAG_SPACE_CITE_EQUALS;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE_CITE_EQUALS: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SPACE_CITE_EQUALS;
                        } else if (c == '"' || c == '\'') {
                            startCiteAttribute(currentState, States::IN_TAG_SPACE_CITE_EQUALS_QUOTE, c);
                            currentState = States::IN_TAG_SPACE_CITE_EQUALS_QUOTE;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SPACE_CITE_EQUALS_QUOTE: {
                        if (c == '"' || c == '\'') {
                            endCiteAttribute(currentState, States::IN_TAG_SEARCH, c);
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_S: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (c == 'c' || c == 'C') {
                            currentState = States::IN_TAG_SC;
                        } else if (c == 't' || c == 'T') {
                            currentState = States::IN_TAG_ST;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SPACE;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SC: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (c == 'r' || c == 'R') {
                            currentState = States::IN_TAG_SCR;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SPACE;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SCR: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (c == 'i' || c == 'I') {
                            currentState = States::IN_TAG_SCRI;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SPACE;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SCRI: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (c == 'p' || c == 'P') {
                            currentState = States::IN_TAG_SCRIP;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SPACE;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SCRIP: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (c == 't' || c == 'T') {
                            currentState = States::IN_TAG_SCRIPT;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SPACE;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SCRIPT: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SCRIPT_SPACE;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SCRIPT_SPACE: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SCRIPT_SPACE;
                        } else if (c == 's' || c == 'S') {
                            currentState = States::IN_TAG_SCRIPT_SPACE_S;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SCRIPT_SPACE_S: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SCRIPT_SPACE;
                        } else if (c == 'r' || c == 'R') {
                            currentState = States::IN_TAG_SCRIPT_SPACE_SR;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SCRIPT_SPACE_SR: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SCRIPT_SPACE;
                        } else if (c == 'c' || c == 'C') {
                            currentState = States::IN_TAG_SCRIPT_SPACE_SRC;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SCRIPT_SPACE_SRC: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SCRIPT_SPACE_SRC;
                        } else if (c == '=') {
                            currentState = States::IN_TAG_SCRIPT_SPACE_SRC_EQUALS;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SCRIPT_SPACE_SRC_EQUALS: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SCRIPT_SPACE_SRC_EQUALS;
                        } else if (c == '"' || c == '\'') {
                            startScriptSrcAttribute(currentState, States::IN_TAG_SCRIPT_SPACE_SRC_EQUALS_QUOTE, c);
                            currentState = States::IN_TAG_SCRIPT_SPACE_SRC_EQUALS_QUOTE;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_SCRIPT_SPACE_SRC_EQUALS_QUOTE: {
                        if (c == '"' || c == '\'') {
                            endScriptSrcAttribute(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        }

                        break;
                    }

                    case States::IN_TAG_ST: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (c == 'y' || c == 'Y') {
                            currentState = States::IN_TAG_STY;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SPACE;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_STY: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (c == 'l' || c == 'L') {
                            currentState = States::IN_TAG_STYL;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SPACE;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_STYL: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (c == 'e' || c == 'E') {
                            currentState = States::IN_TAG_STYLE;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_SPACE;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_STYLE: {
                        if (c == '>') {
                            currentState = States::IN_STYLE_START;
                        } else if (c == '/') {
                            currentState = States::IN_TAG_STYLE_SLASH;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_STYLE_SPACE;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_STYLE_SLASH: {
                        if (c == '>') {
                            resumeText(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_TAG_STYLE_SLASH;
                        } else {
                            currentState = States::IN_TAG_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_STYLE_SPACE: {
                        if (c == '>') {
                            currentState = States::IN_STYLE_START;
                        } else {
                            currentState = States::IN_TAG_STYLE_SEARCH;
                        }

                        break;
                    }

                    case States::IN_TAG_STYLE_SEARCH: {
                        if (c == '>') {
                            currentState = States::IN_STYLE_START;
                        } else if (c == '"' || c == '\'') {
                            currentState = States::IN_TAG_STYLE_QUOTE;
                        } else if (c == '/') {
                            currentState = States::IN_TAG_STYLE_SLASH;
                        }

                        break;
                    }

                    case States::IN_TAG_STYLE_QUOTE: {
                        if (c == '"' || c == '\'') {
                            currentState = States::IN_TAG_STYLE_SEARCH;
                        }

                        break;
                    }

                    case States::IN_STYLE_START: {
                        if (c == '<') {
                            currentState = States::IN_TAG_START;
                        } else {
                            startStyle(currentState, States::IN_STYLE, c);
                            currentState = States::IN_STYLE;
                        }

                        break;
                    }

                    case States::IN_STYLE: {
                        if (c == '<') {
                            currentState = States::IN_STYLE_TAG_START;
                        }

                        break;
                    }

                    case States::IN_STYLE_TAG_START: {
                        if (c == '/') {
                            currentState = States::IN_STYLE_TAG_SLASH;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_STYLE_TAG_START;
                        } else {
                            currentState = States::IN_STYLE;
                        }

                        break;
                    }

                    case States::IN_STYLE_TAG_SLASH: {
                        if (c == 's' || c == 'S') {
                            currentState = States::IN_STYLE_TAG_SLASH_S;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_STYLE_TAG_SLASH;
                        } else {
                            currentState = States::IN_STYLE;
                        }

                        break;
                    }

                    case States::IN_STYLE_TAG_SLASH_S: {
                        if (c == 't' || c == 'T') {
                            currentState = States::IN_STYLE_TAG_SLASH_ST;
                        } else {
                            currentState = States::IN_STYLE;
                        }

                        break;
                    }

                    case States::IN_STYLE_TAG_SLASH_ST: {
                        if (c == 'y' || c == 'Y') {
                            currentState = States::IN_STYLE_TAG_SLASH_STY;
                        } else {
                            currentState = States::IN_STYLE;
                        }

                        break;
                    }

                    case States::IN_STYLE_TAG_SLASH_STY: {
                        if (c == 'l' || c == 'L') {
                            currentState = States::IN_STYLE_TAG_SLASH_STYL;
                        } else {
                            currentState = States::IN_STYLE;
                        }

                        break;
                    }

                    case States::IN_STYLE_TAG_SLASH_STYL: {
                        if (c == 'e' || c == 'E') {
                            currentState = States::IN_STYLE_TAG_SLASH_STYLE;
                        } else {
                            currentState = States::IN_STYLE;
                        }

                        break;
                    }

                    case States::IN_STYLE_TAG_SLASH_STYLE: {
                        if (c == '>') {
                            endStyle(currentState, States::IN_TEXT_SPACE, c);
                            currentState = States::IN_TEXT_SPACE;
                        } else if (std::isspace(c)) {
                            currentState = States::IN_STYLE_TAG_SLASH_STYLE;
                        } else {
                            currentState = States::IN_STYLE;
                        }

                        break;
                    }

                    default: {
                        assert(false);
                    }
                }
            }

            /**
             * Method that resets the state machine.
             */
            void reset() {
                currentState = States::IN_TEXT_SPACE;
            }

            /**
             * Method that returns a string representation of a state value.
             *
             * \param[in] state The state to convert to a string.
             *
             * \return Returns a string representation of the state.
             */
            const char* toString(States state) const {
                switch (state) {
                    case States::IN_TEXT_SPACE: {
                        return "IN_TEXT_SPACE";
                    }

                    case States::IN_TEXT_MULTIPLE_SPACE: {
                        return "IN_TEXT_MULTIPLE_SPACE";
                    }

                    case States::IN_TEXT: {
                        return "IN_TEXT";
                    }

                    case States::IN_TAG_START: {
                        return "IN_TAG_START";
                    }

                    case States::IN_TAG_SEARCH: {
                        return "IN_TAG_SEARCH";
                    }

                    case States::IN_TAG_QUOTE: {
                        return "IN_TAG_QUOTE";
                    }

                    case States::IN_TAG_SPACE: {
                        return "IN_TAG_SPACE";
                    }

                    case States::IN_TAG_SLASH: {
                        return "IN_TAG_SLASH";
                    }

                    case States::IN_TAG_SPACE_S: {
                        return "IN_TAG_SPACE_S";
                    }

                    case States::IN_TAG_SPACE_SR: {
                        return "IN_TAG_SPACE_SR";
                    }

                    case States::IN_TAG_SPACE_SRC: {
                        return "IN_TAG_SPACE_SRC";
                    }

                    case States::IN_TAG_SPACE_SRC_EQUALS: {
                        return "IN_TAG_SPACE_SRC_EQUALS";
                    }

                    case States::IN_TAG_SPACE_SRC_EQUALS_QUOTE: {
                        return "IN_TAG_SPACE_SRC_EQUALS_QUOTE";
                    }

                    case States::IN_TAG_SPACE_SRC_EQUALS_QUOTE_QM: {
                        return "IN_TAG_SPACE_SRC_EQUALS_QUOTE_QM";
                    }

                    case States::IN_TAG_SPACE_H: {
                        return "IN_TAG_SPACE_H";
                    }

                    case States::IN_TAG_SPACE_HR: {
                        return "IN_TAG_SPACE_HR";
                    }

                    case States::IN_TAG_SPACE_HRE: {
                        return "IN_TAG_SPACE_HRE";
                    }

                    case States::IN_TAG_SPACE_HREF: {
                        return "IN_TAG_SPACE_HREF";
                    }

                    case States::IN_TAG_SPACE_HREF_EQUALS: {
                        return "IN_TAG_SPACE_HREF_EQUALS";
                    }

                    case States::IN_TAG_SPACE_HREF_EQUALS_QUOTE: {
                        return "IN_TAG_SPACE_HREF_EQUALS_QUOTE";
                    }

                    case States::IN_TAG_SPACE_C: {
                        return "IN_TAG_SPACE_C";
                    }

                    case States::IN_TAG_SPACE_CI: {
                        return "IN_TAG_SPACE_CI";
                    }

                    case States::IN_TAG_SPACE_CIT: {
                        return "IN_TAG_SPACE_CIT";
                    }

                    case States::IN_TAG_SPACE_CITE: {
                        return "IN_TAG_SPACE_CITE";
                    }

                    case States::IN_TAG_SPACE_CITE_EQUALS: {
                        return "IN_TAG_SPACE_CITE_EQUALS";
                    }

                    case States::IN_TAG_SPACE_CITE_EQUALS_QUOTE: {
                        return "IN_TAG_SPACE_CITE_EQUALS_QUOTE";
                    }

                    case States::IN_TAG_S: {
                        return "IN_TAG_S";
                    }

                    case States::IN_TAG_SC: {
                        return "IN_TAG_SC";
                    }

                    case States::IN_TAG_SCR: {
                        return "IN_TAG_SCR";
                    }

                    case States::IN_TAG_SCRI: {
                        return "IN_TAG_SCRI";
                    }

                    case States::IN_TAG_SCRIP: {
                        return "IN_TAG_SCRIP";
                    }

                    case States::IN_TAG_SCRIPT: {
                        return "IN_TAG_SCRIPT";
                    }

                    case States::IN_TAG_SCRIPT_SPACE: {
                        return "IN_TAG_SCRIPT_SPACE";
                    }

                    case States::IN_TAG_SCRIPT_SPACE_S: {
                        return "IN_TAG_SCRIPT_SPACE_S";
                    }

                    case States::IN_TAG_SCRIPT_SPACE_SR: {
                        return "IN_TAG_SCRIPT_SPACE_SR";
                    }

                    case States::IN_TAG_SCRIPT_SPACE_SRC: {
                        return "IN_TAG_SCRIPT_SPACE_SRC";
                    }

                    case States::IN_TAG_SCRIPT_SPACE_SRC_EQUALS: {
                        return "IN_TAG_SCRIPT_SPACE_SRC_EQUALS";
                    }

                    case States::IN_TAG_SCRIPT_SPACE_SRC_EQUALS_QUOTE: {
                        return "IN_TAG_SCRIPT_SPACE_SRC_EQUALS_QUOTE";
                    }

                    case States::IN_TAG_ST: {
                        return "IN_TAG_ST";
                    }

                    case States::IN_TAG_STY: {
                        return "IN_TAG_STY";
                    }

                    case States::IN_TAG_STYL: {
                        return "IN_TAG_STYL";
                    }

                    case States::IN_TAG_STYLE: {
                        return "IN_TAG_STYLE";
                    }

                    case States::IN_TAG_STYLE_SLASH: {
                        return "IN_TAG_STYLE_SLASH";
                    }

                    case States::IN_TAG_STYLE_SPACE: {
                        return "IN_TAG_STYLE_SPACE";
                    }

                    case States::IN_TAG_STYLE_SEARCH: {
                        return "IN_TAG_STYLE_SEARCH";
                    }

                    case States::IN_TAG_STYLE_QUOTE: {
                        return "IN_TAG_STYLE_QUOTE";
                    }

                    case States::IN_STYLE_START: {
                        return "IN_STYLE_START";
                    }

                    case States::IN_STYLE: {
                        return "IN_STYLE";
                    }

                    case States::IN_STYLE_TAG_START: {
                        return "IN_STYLE_TAG_START";
                    }

                    case States::IN_STYLE_TAG_SLASH: {
                        return "IN_STYLE_TAG_SLASH";
                    }

                    case States::IN_STYLE_TAG_SLASH_S: {
                        return "IN_STYLE_TAG_SLASH_S";
                    }

                    case States::IN_STYLE_TAG_SLASH_ST: {
                        return "IN_STYLE_TAG_SLASH_ST";
                    }

                    case States::IN_STYLE_TAG_SLASH_STY: {
                        return "IN_STYLE_TAG_SLASH_STY";
                    }

                    case States::IN_STYLE_TAG_SLASH_STYL: {
                        return "IN_STYLE_TAG_SLASH_STYL";
                    }

                    case States::IN_STYLE_TAG_SLASH_STYLE: {
                        return "IN_STYLE_TAG_SLASH_STYLE";
                    }

                    default: {
                        assert(false);
                    }
                }
            }

            /**
             * Virtual method triggered on the following transitions:
             *
             * * IN_TEXT_SPACE -> IN_TAG_START c == '<'
             * * IN_TEXT_MULTIPLE_SPACE -> IN_TAG_START c == '<'
             * * IN_TEXT -> IN_TAG_START c == '<'
             *
             * \param[in] oldState Our current state.
             *
             * \param[in] newState The new state.
             *
             * \param[in] c        The value that triggered this transition.
             */
            virtual void startTag(
                    States /* oldState */,
                    States /* newState */,
                    char&  /* c */
                ) {}

            /**
             * Virtual method triggered on the following transitions:
             *
             * * IN_TEXT_SPACE -> IN_TEXT_MULTIPLE_SPACE std::isspace(c)
             *
             * \param[in] oldState Our current state.
             *
             * \param[in] newState The new state.
             *
             * \param[in] c        The value that triggered this transition.
             */
            virtual void multipleWhiteSpace(
                    States /* oldState */,
                    States /* newState */,
                    char&  /* c */
                ) {}

            /**
             * Virtual method triggered on the following transitions:
             *
             * * IN_TEXT_SPACE -> IN_TEXT c != '<' && !std::isspace(c)
             * * IN_TEXT_MULTIPLE_SPACE -> IN_TEXT c != '<' && !std::isspace(c)
             * * IN_TAG_SPACE_S -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SPACE_SR -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SPACE_SRC -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SPACE_SRC_EQUALS -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SPACE_H -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SPACE_HR -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SPACE_HRE -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SPACE_HREF -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SPACE_HREF_EQUALS -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SPACE_C -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SPACE_CI -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SPACE_CIT -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SPACE_CITE -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SPACE_CITE_EQUALS -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_S -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SC -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SCR -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SCRI -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SCRIP -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SCRIPT -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SCRIPT_SPACE -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SCRIPT_SPACE_S -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SCRIPT_SPACE_SR -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SCRIPT_SPACE_SRC -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SCRIPT_SPACE_SRC_EQUALS -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_ST -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_STY -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_STYL -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_STYLE_SLASH -> IN_TEXT_SPACE c == '>'
             *
             * \param[in] oldState Our current state.
             *
             * \param[in] newState The new state.
             *
             * \param[in] c        The value that triggered this transition.
             */
            virtual void resumeText(
                    States /* oldState */,
                    States /* newState */,
                    char&  /* c */
                ) {}

            /**
             * Virtual method triggered on the following transitions:
             *
             * * IN_TEXT -> IN_TEXT_SPACE std::isspace(c)
             *
             * \param[in] oldState Our current state.
             *
             * \param[in] newState The new state.
             *
             * \param[in] c        The value that triggered this transition.
             */
            virtual void whitespace(
                    States /* oldState */,
                    States /* newState */,
                    char&  /* c */
                ) {}

            /**
             * Virtual method triggered on the following transitions:
             *
             * * IN_TAG_SEARCH -> IN_TEXT_SPACE c == '>'
             * * IN_TAG_SPACE -> IN_TEXT_SPACE c == '>'
             *
             * \param[in] oldState Our current state.
             *
             * \param[in] newState The new state.
             *
             * \param[in] c        The value that triggered this transition.
             */
            virtual void endTag(
                    States /* oldState */,
                    States /* newState */,
                    char&  /* c */
                ) {}

            /**
             * Virtual method triggered on the following transitions:
             *
             * * IN_TAG_SPACE_SRC_EQUALS -> IN_TAG_SPACE_SRC_EQUALS_QUOTE c == '"' || c == '\''
             *
             * \param[in] oldState Our current state.
             *
             * \param[in] newState The new state.
             *
             * \param[in] c        The value that triggered this transition.
             */
            virtual void startSrcAttribute(
                    States /* oldState */,
                    States /* newState */,
                    char&  /* c */
                ) {}

            /**
             * Virtual method triggered on the following transitions:
             *
             * * IN_TAG_SPACE_SRC_EQUALS_QUOTE -> IN_TAG_SEARCH c == '"' || c == '\''
             * * IN_TAG_SPACE_SRC_EQUALS_QUOTE -> IN_TAG_SPACE_SRC_EQUALS_QUOTE_QM c == '?'
             *
             * \param[in] oldState Our current state.
             *
             * \param[in] newState The new state.
             *
             * \param[in] c        The value that triggered this transition.
             */
            virtual void endSrcAttribute(
                    States /* oldState */,
                    States /* newState */,
                    char&  /* c */
                ) {}

            /**
             * Virtual method triggered on the following transitions:
             *
             * * IN_TAG_SPACE_HREF_EQUALS -> IN_TAG_SPACE_HREF_EQUALS_QUOTE c == '"' || c == '\''
             *
             * \param[in] oldState Our current state.
             *
             * \param[in] newState The new state.
             *
             * \param[in] c        The value that triggered this transition.
             */
            virtual void startHrefAttribute(
                    States /* oldState */,
                    States /* newState */,
                    char&  /* c */
                ) {}

            /**
             * Virtual method triggered on the following transitions:
             *
             * * IN_TAG_SPACE_HREF_EQUALS_QUOTE -> IN_TAG_SEARCH c == '"' || c == '\''
             *
             * \param[in] oldState Our current state.
             *
             * \param[in] newState The new state.
             *
             * \param[in] c        The value that triggered this transition.
             */
            virtual void endHrefAttribute(
                    States /* oldState */,
                    States /* newState */,
                    char&  /* c */
                ) {}

            /**
             * Virtual method triggered on the following transitions:
             *
             * * IN_TAG_SPACE_CITE_EQUALS -> IN_TAG_SPACE_CITE_EQUALS_QUOTE c == '"' || c == '\''
             *
             * \param[in] oldState Our current state.
             *
             * \param[in] newState The new state.
             *
             * \param[in] c        The value that triggered this transition.
             */
            virtual void startCiteAttribute(
                    States /* oldState */,
                    States /* newState */,
                    char&  /* c */
                ) {}

            /**
             * Virtual method triggered on the following transitions:
             *
             * * IN_TAG_SPACE_CITE_EQUALS_QUOTE -> IN_TAG_SEARCH c == '"' || c == '\''
             *
             * \param[in] oldState Our current state.
             *
             * \param[in] newState The new state.
             *
             * \param[in] c        The value that triggered this transition.
             */
            virtual void endCiteAttribute(
                    States /* oldState */,
                    States /* newState */,
                    char&  /* c */
                ) {}

            /**
             * Virtual method triggered on the following transitions:
             *
             * * IN_TAG_SCRIPT_SPACE_SRC_EQUALS -> IN_TAG_SCRIPT_SPACE_SRC_EQUALS_QUOTE c == '"' || c == '\''
             *
             * \param[in] oldState Our current state.
             *
             * \param[in] newState The new state.
             *
             * \param[in] c        The value that triggered this transition.
             */
            virtual void startScriptSrcAttribute(
                    States /* oldState */,
                    States /* newState */,
                    char&  /* c */
                ) {}

            /**
             * Virtual method triggered on the following transitions:
             *
             * * IN_TAG_SCRIPT_SPACE_SRC_EQUALS_QUOTE -> IN_TEXT_SPACE c == '"' || c == '\''
             *
             * \param[in] oldState Our current state.
             *
             * \param[in] newState The new state.
             *
             * \param[in] c        The value that triggered this transition.
             */
            virtual void endScriptSrcAttribute(
                    States /* oldState */,
                    States /* newState */,
                    char&  /* c */
                ) {}

            /**
             * Virtual method triggered on the following transitions:
             *
             * * IN_STYLE_START -> IN_STYLE
             *
             * \param[in] oldState Our current state.
             *
             * \param[in] newState The new state.
             *
             * \param[in] c        The value that triggered this transition.
             */
            virtual void startStyle(
                    States /* oldState */,
                    States /* newState */,
                    char&  /* c */
                ) {}

            /**
             * Virtual method triggered on the following transitions:
             *
             * * IN_STYLE_TAG_SLASH_STYLE -> IN_TEXT_SPACE c == '>'
             *
             * \param[in] oldState Our current state.
             *
             * \param[in] newState The new state.
             *
             * \param[in] c        The value that triggered this transition.
             */
            virtual void endStyle(
                    States /* oldState */,
                    States /* newState */,
                    char&  /* c */
                ) {}
    };
}

#endif
